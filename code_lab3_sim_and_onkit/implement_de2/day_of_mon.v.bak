module day_of_mon(
	output reg [5:0] rst_numb_day
	);
	
	reg clk;
	reg rst_n;
	wire inc_year;
	wire [5:0] mon_numb;
	wire [5:0] year_numb;
	counter_mon cnt_mon(.clk_1Hz(clk_1Hz), .rst_n  (rst_n), .inc_year(inc_year), .out_mon(mon_numb));
	counter_year cnt_year(.clk_1Hz(clk_1Hz), .rst_n  (rst_n), .out_year(year_numb));

	reg [3:0] arr_mon_31 [0:6];
	reg [3:0] arr_mon_30 [0:3];

	integer i,j;
	initial
	begin
		arr_mon_31[0] = 1;
    	arr_mon_31[1] = 3;
    	arr_mon_31[2] = 5;
    	arr_mon_31[3] = 7;
    	arr_mon_31[4] = 8;
    	arr_mon_31[5] = 10;
    	arr_mon_31[6] = 12;

    	arr_mon_30[0] = 4;
    	arr_mon_30[1] = 5;
    	arr_mon_30[2] = 9;
    	arr_mon_30[3] = 11;
	end

	always @(*) begin
		for (i = 0; i < 7; i=i+1) begin
				if(out_mon == arr_mon_31[i]) begin
					rst_numb_day <= 6;
				end else begin
					for (j = 0; j < 4; j=j+1) begin
						if (out_mon == arr_mon_30[j]) begin
							rst_numb_day <= 5;
						end else if(out_mon == 2)begin
							if (out_year % 4 == 0) begin
								rst_numb_day <= 4;
							end else begin
								rst_numb_day <= 3;
							end
						end
					end
				end
			end
	end
endmodule